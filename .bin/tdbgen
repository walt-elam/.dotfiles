#!/bin/bash
#
# tdbgen
#
# Tag DataBase GENeration script
#
# If the argument provided is "clean" then tag files are removed. All other
# arguments are ignored.
#
# Any directory in bl_dirs will have its contents ignored, and only files with
# the extensions in wl_exts will be indexed.
################################################################################

def_dirs=".git"
def_exts="c h cpp hpp py asm S s"

if [[ -z "${bl_dirs}" ]]; then
    bl_dirs=${def_dirs}
fi

if [[ -z "${wl_exts}" ]]; then
    wl_exts=${def_exts}
fi

function build_prune_str()
{
    prune_str=""

    if [[ "${1}" ]]; then
        for d in ${1}; do
            prune_str="${prune_str} -g '!*${d}/*'"
        done
    fi

    echo -n "${prune_str}"
}

function build_include_str()
{
    include_str=""

    if [[ "${1}" ]]; then
        for e in ${1}; do
            include_str="${include_str} -g '*.${e}'"
        done
    fi

    echo -n "${include_str}"
}

function generate_tags()
{
    prune_str=`build_prune_str "${bl_dirs}"`
    include_str=`build_include_str "${wl_exts}"`

    options="--case-sensitive --color=never --follow --hidden --no-config"
    options="${options} --no-ignore --no-ignore-global --sort path --trim"
    cand_files=`mktemp`
    eval "rg ${include_str} ${prune_str} ${options} --files > ${cand_files}"
    gtags -f ${cand_files}
    rm -f "${cand_files}"
}

case "${1}" in
    clean)
        echo "Cleaning tag database files"
        rm -f GTAGS GRTAGS GPATH
        ;;

    *)
        generate_tags
        ;;
esac

